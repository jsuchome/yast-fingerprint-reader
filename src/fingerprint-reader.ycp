/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	clients/fingerprint-reader.ycp
 * Package:	Configuration of fingerprint-reader
 * Summary:	Main file
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Main file for fingerprint-reader configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of fingerprint-reader</h3>
 */

textdomain "fingerprint-reader";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("FingerprintReader module started");

import "CommandLine";
import "FingerprintReader";

include "fingerprint-reader/wizards.ycp";

/**
 * Enable the Fingerprint reader
 * @param options  a list of parameters passed as args
 * @return boolean true on success
 */
define boolean EnableHandler (map options) {

    if (!FingerprintReader::use_pam)
    {
	FingerprintReader::use_pam	= false;
	FingerprintReader::modified	= true;
    }
    return FingerprintReader::modified;
}

/**
 * Disable the Fingerprint reader
 * @param options  a list of parameters passed as args
 * @return boolean true on success
 */
define boolean DisableHandler (map options) {
    if (FingerprintReader::use_pam)
    {
	FingerprintReader::use_pam	= true;
	FingerprintReader::modified	= true;
    }
    return FingerprintReader::modified;
}

/**
 * Print summary of basic options
 * @return boolean false
 */
define boolean SummaryHandler (map options ) {

    CommandLine::Print (FingerprintReader::use_pam ?
	// summary item
	_("Use Fingerprint Authentication") :
	// summary item
	_("Do Not Use Fingerprint Authentication"));
    return false; // do not call Write...
}

map cmdline_description = $[
    "id"	: "fingerprint-reader",
    /* Command line help text for the Xfingerprint-reader module */
    "help"	: _("Configuration of fingerprint-reader"),
    "guihandler"        : FingerprintReaderSequence,
    "initialize"        : FingerprintReader::Read,
    "finish"            : FingerprintReader::Write,
    "actions"		: $[
	"enable" :$[
	    "handler"	: EnableHandler,
	    // command line help text for 'enable' action
	    "help"	: _("Enable fingerprint authentication")
	],
	"disable" :$[
	    "handler"	: DisableHandler,
	    // command line help text for 'disable' action
	    "help"	: _("Disable fingerprint authentication")
	],
	"summary" :$[
	    "handler"	: SummaryHandler,
	    // command line help text for 'summary' action
	    "help"	: _("Configuration summary")
	],
    ],
    "options"		: $[
    ],
    "mappings"		: $[
	"enable"	: [],
	"disable"	: [],
	"summary"	: [],
    ],
];

any ret = CommandLine::Run(cmdline_description);

y2milestone("FingerprintReader module finished with %1", ret);
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
