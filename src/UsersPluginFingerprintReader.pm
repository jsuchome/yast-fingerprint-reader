#! /usr/bin/perl -w
#
# This is the API part of UsersPluginFingerprintReader plugin -
# configuration of user's fingerprints on specific device
#

package UsersPluginFingerprintReader;

use strict;

use YaST::YCP qw(:LOGGING);
use YaPI;
use Data::Dumper;

textdomain("users");

our %TYPEINFO;

##--------------------------------------
##--------------------- global imports

YaST::YCP::Import ("SCR");

##--------------------------------------
##--------------------- global variables

# error message, returned when some plugin function fails
my $error	= "";

##--------------------------------------

# All functions have 2 "any" parameters: this will probably mean
# 1st: configuration map (hash) - e.g. saying if we work with user
# 2nd: data map (hash) of user to work with

# in 'config' map there is a info of this type:
# "what"		=> "user" / "group"
# "modified"		=> "added"/"edited"/"deleted"
# "enabled"		=> 1/ key not present
# "disabled"		=> 1/ key not present
# "plugins_to_remove"	=> list of plugins which has to be removed 

# 'data' map contains the atrtributes of the user. It could also contain
# some keys, which Users module uses internaly (like 'groupname' for name of
# user's default group). Just ignore these values

# -- Warning messages --
# There is a special way, when you want to give user additional information
# (warning) about some issues appeared during the function.
#
# These keys can be saved by plugin to the result structure of AddBefore,
# Add, EditBefore, Edit, Enable, Disable calls:
#    "warning_message"		=> STRING
#        Translated message that should be shown to user (probably as a popup)
#    "warning_message_ID"	=> STRING
#	The ID of the message (optional).
#
# This key can be present in user $data hash:
#    "confirmed_warnings"	=> HASH (in the form { message_ID_1 => 1 })
#	(This has sense only if plugin uses optional "warning_message_ID" key)
#	Indicates which messages were already shown to this user.
#	Plugin function may check for existence of the message_ID_1 in this
#	hash before generating "warning_message", to realize if this message
#	was alredy shown before (in the same situation).
# See example in AddBefore function.
    
##------------------------------------

# helper, check if Fingerprint Reader was already configured
sub fingerprint_reader_configured {

    #FIXME do a pam-config query
    return YaST::YCP::Boolean (1);
}

# return names of provided functions
BEGIN { $TYPEINFO{Interface} = ["function", ["list", "string"], "any", "any"];}
sub Interface {

    my $self		= shift;
    my @interface 	= (
	    "GUIClient",
	    "Check",
	    "Name",
	    "Summary",
	    "Restriction",
	    "Interface",
	    "PluginPresent",
	    "PluginRemovable",
	    "Error",
	    "AddBefore",
	    "EditBefore",
    );
    return \@interface;
}

# return error message, generated by plugin
BEGIN { $TYPEINFO{Error} = ["function", "string", "any", "any"];}
sub Error {

    my $self		= shift;
    return $error;
}


# return plugin name, used for GUI (translated)
BEGIN { $TYPEINFO{Name} = ["function", "string", "any", "any"];}
sub Name {

    my $self		= shift;
    # plugin name
    return __("Fingerprint configuration");
}

##------------------------------------
# return plugin summary (to be shown in table with all plugins)
BEGIN { $TYPEINFO{Summary} = ["function", "string", "any", "any"];}
sub Summary {

    my $self	= shift;
    # plugin summary (table item)
    my $ret 	= __("Set the fingerprint of an User");
    return $ret;
}

##------------------------------------
# checks the current data map of user (2nd parameter) and returns
# true if given user has our plugin
BEGIN { $TYPEINFO{PluginPresent} = ["function", "boolean", "any", "any"];}
sub PluginPresent {

    my $self	= shift;

    # it is present every time it is available
    return fingerprint_reader_configured ();
}

##------------------------------------
# Is it possible to remove this plugin from user?
BEGIN { $TYPEINFO{PluginRemovable} = ["function", "boolean", "any", "any"];}
sub PluginRemovable {
    # doesn't have sense to remove
    return YaST::YCP::Boolean (0);
}


##------------------------------------
# return name of YCP client defining YCP GUI
BEGIN { $TYPEINFO{GUIClient} = ["function", "string", "any", "any"];}
sub GUIClient {

    my $self	= shift;
    return "users_plugin_fingerprint_reader";
}

##------------------------------------
# Type of objects this plugin is restricted to.
# It defines:
#	1. type of objects which it should be applied to (ldap/nis/local/system)
#	2. type of objects at all (user)
# If this function doesn't exist, plugin is applied for all users of all types
BEGIN { $TYPEINFO{Restriction} = ["function",
    ["map", "string", "any"], "any", "any"];}
sub Restriction {

    my $self	= shift;
    return {
	    "local"	=> 1,
	    "system"	=> 1,
#	    "ldap"	=> 1, #only for local ldap users?
	    # only for users
	    "user"	=> 1,
    };
}

# this will be called at the beggining of Users::Add
# Could be called multiple times for one user
BEGIN { $TYPEINFO{AddBefore} = ["function",
    ["map", "string", "any"],
    "any", "any"];
}
sub AddBefore {

    my ($self, $config, $data)  = @_;

    if (!fingerprint_reader_configured ()) {
	# error popup
	$error	= __("Fingerprint reader is not configured. Run 'yast2-fingerprint-reader' to configure it");
	return undef;
    }
    return $data;
}

# this will be called at the beggining of Users::Edit
BEGIN { $TYPEINFO{EditBefore} = ["function",
    ["map", "string", "any"],
    "any", "any"];
}
sub EditBefore {

    my ($self, $config, $data)  = @_;

    if (!fingerprint_reader_configured ()) {
	# error popup
	$error	= __("Fingerprint reader is not configured. Run 'yast2-fingerprint-reader' to configure it");
	return undef;
    }
    return $data;
}



42
# EOF
