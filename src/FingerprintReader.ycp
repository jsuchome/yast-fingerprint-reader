/* ------------------------------------------------------------------------------
 * Copyright (c) 2006-2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/FingerprintReader.ycp
 * Package:	Configuration of fingerprint-reader
 * Summary:	FingerprintReader settings, input and output functions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of fingerprint-reader.
 * Input and output routines.
 */

{

module "FingerprintReader";
textdomain "fingerprint-reader";

import "FileUtils";
import "Pam";
import "Popup";
import "Progress";
import "Report";
import "Summary";

/**
 * Data was modified?
 */
global boolean modified = false;

// if yast2-users should be called after fingerprint is set up

global boolean run_users	= false;
/**
 * Required packages for this module to operate
 */
global list<string> required_packages = ["pam_fprint"];

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * if Fingerprint Reader authentication is enabled
 */
global boolean use_pam	= false;

/**
 * Directory with fingerprint files that should be imported
 */
global string import_dir	= "";

/**
 * Get the list of fingerprint readers
 */
global list ReadFingerprintReaderDevices () {

    list devices     = (list) SCR::Read (.probe.fingerprint);
    if (devices == nil)
	devices = [];
    return devices;
}

/**
 * If pam_mount is enabled, pam_fprint cannot be used (bnc#390810)
 */
global boolean CryptedHomesEnabled () {

    boolean enabled	= false;
    foreach (string service, ["gdm", "login", "kdm", "xdm", "sudo" ], {
	map out = (map)SCR::Execute (.target.bash_output, sformat (
	    "pam-config --service %1 -q --mount", service));
	if (out["exit"]:1 == 0)
	{
	    list ll = filter (string l, splitstring(out["stdout"]:"", "\n"), {
		return (l != "");
	    });
	    if (size (ll) > 0)
	    {
		enabled	= true;
		break;
	    }
	}
    });
    return enabled;
}

/**
 * Read all fingerprint-reader settings
 * @return true on success
 */
global boolean Read() {

    list devices	= ReadFingerprintReaderDevices ();

    if (devices == [])
    {
	// error popup: no config of non-existent device
	Report::Error (_("Fingerprint reader device is not available on this system."));
	return false;
    }
    if (CryptedHomesEnabled ())
    {
	// error popup (pam_fp cannot work with pam_mount)
	Report::Error (_("Fingerprint reader devices cannot be used when encrypted directories are used."));
	return false;
    }
    use_pam	= Pam::Enabled ("fprint");

    modified = false;
    return true;
}

/**
 * Write all fingerprint-reader settings
 * @return true on success
 */
global boolean Write() {

    if (!modified)
	return true;

    // FingerprintReader read dialog captio
    string caption = _("Saving Fingerprint Reader Configuration");

    integer sl = 100;
    sleep(sl);

    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", 2, [
	    // Progress stage
	    _("Write the PAM settings"),
	    // Progress stage
	    _("Import fingerprint files"),
	], [
	    // Progress step
	    _("Writing the PAM settings..."),
	    // Progress step
	    _("Importing fingerprint files..."),
	    // Progress finished
	    _("Finished")
	],
	""
    );

    Progress::NextStage();

    boolean pam_ret	= use_pam ?
	Pam::Add ("fprint") : Pam::Remove ("fprint");
    if (!pam_ret)
	// Error message
	Report::Error (_("Cannot write PAM settings."));

    sleep(sl);

    Progress::NextStage();

    Progress::NextStage();
    sleep(sl);

    return true;
}

/**
 * Get all fingerprint-reader settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {

    use_pam	= settings["use_pam"]:use_pam;
    import_dir	= settings["import_dir"]:import_dir;
    return true;
}

/**
 * Dump the fingerprint-reader settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
    return $[
	"use_pam"	: use_pam,
	"import_dir"	: import_dir
    ];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global list Summary() {

    // summary header
    string summary = Summary::AddHeader ("", _("PAM Login"));

    summary = Summary::AddLine (summary, (use_pam) ?
	// summary item
	_("Use Fingerprint Authentication") :
	// summary item
	_("Do Not Use Fingerprint Authentication"));
    return [ summary, [] ];
}

/**
 * Create a short textual summary
 * @return summary of the current configuration
 */
global define string ShortSummary() {

    return sformat (
	// summary text (yes/no follows)
	_("<b>Fingerprint Authentication Enabled</b>: %1<br>"), use_pam ?
	// summary value
	_("Yes") :
	// summary value
	_("No"));
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
    return $[ "install": required_packages, "remove":[] ];
}

/* EOF */
}
