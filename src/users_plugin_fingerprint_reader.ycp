/**
 * File:
 *	include/users/users_plugin_fingerprint_reader.ycp
 *
 * Package:
 *	Configuration of Fingerprint Reader
 *
 * Summary:
 *	GUI part of plugin (UsersPluginFingerprintReader) used to manage
 *	user fingerprints on the appropriate hardware
 *
 * Authors:
 *	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{
    textdomain "fingerprint-reader";

    import "Directory";
    import "Label";
    import "Users";
    import "UsersPluginFingerprintReader";
    import "Wizard";

    any ret			= nil;
    string func			= "";
    map<string,any> config	= $[];
    map<string,any> data	= $[];

    /* Check arguments */
    if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
	func = (string) WFM::Args(0);
	if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	    config = (map<string,any>)WFM::Args(1);
	if(size(WFM::Args()) > 2 && is(WFM::Args(2), map))
	    data = (map<string,any>)WFM::Args(2);
    }
    y2milestone("----------------------------------------");
    y2milestone("users plugin started: FingerprintReader");

    y2debug ("func=%1, config=%2, data=%3", func,config,data);

    if (func == "Summary") {
	ret = UsersPluginFingerprintReader::Summary (config, $[]);
    }
    else if (func == "Name") {
	ret = UsersPluginFingerprintReader::Name (config, $[]);
    }
    else if (func == "Dialog") {

	string caption	= UsersPluginFingerprintReader::Name (config, $[]);
	// help text for fingerprint reader plugin
	string help_text = _("<p>Swipe your finger on the fingerprint reader. Three successful attempts  
are needed to save the new fingerprint.</p>");
	string username	= data["uid"]:"";
	if (username == "")
	{
	    y2error ("user name is empty!");
	    return `back;
	}
	string fingerprint_dir	= Directory::tmpdir + "/" + username + "/";

	term contents = `HBox (`HSpacing (1.5), `VBox(
	    `VSpacing(0.5),
	    `ReplacePoint (`id (`rp),
		// status label
		`Label (`id (`label), _("Initializing fingerprint reader..."))
	    ),
	    `ReplacePoint (`id (`rpstatus), `VSpacing ()),
	    `PushButton (`id (`cancel), Label::CancelButton ()),
	    `VSpacing (0.5)
	    ),
	    `HSpacing (1.5)
	);

	Wizard::CreateDialog ();
	Wizard::SetTitleIcon ("yast-fingerprint");

	// dialog caption
	Wizard::SetContentsButtons(caption, contents, help_text,
	    Label::CancelButton(), Label::OKButton());

	Wizard::HideAbortButton ();
	Wizard::DisableNextButton ();
	Wizard::DisableBackButton ();

	boolean exit		= false;
	any ui			= nil;
	integer exit_status	= 256;
	integer	swipe_success	= 0;
	integer swipe_failed	= 0;

	// helper function: return exit status of the fprint proccess;
	// regulary check user input for `cancel button
	integer get_exit_status () {
	    integer ex	= exit_status;
	    while (true)
	    {
		boolean exited = (boolean) SCR::Read (.fprint.check_exit);
		if (exited)
		{
		    ex = (integer) SCR::Read (.fprint.exit_status);
		    break;
		}
		ui	= UI::PollInput ();
		if (ui == `cancel)
		{
		    SCR::Execute (.fprint.cancel);
		    UI::ReplaceWidget (`id (`rp), `Label (_("Canceled")));
		    break;
		}
		sleep (100);
	    }
	    return ex;
	}

	// helper function, form the string for UI from actuall data
	void replace_swipe_string () {

	    UI::ReplaceWidget (`id (`rpstatus), `Label (
		// status message (%1, %2 are numbers)
		sformat (_("Successful swipes: %1, failed swipes: %2"),
		swipe_success, swipe_failed)
	    ));
	}


	void status_message (string label, string message) {
	    UI::ReplaceWidget (`id (`rp), `Label (label));
	    UI::ReplaceWidget (`id (`rpstatus), `Label (message));
	}


	if (SCR::Execute (.fprint.enroll, fingerprint_dir) != true)
	{
	    ui = `cancel;
	    // status message
	    UI::ReplaceWidget (`id (`rp),
		`Label (_("Initialization of fingerprint reader failed.")));
	}
	else
	    status_message (
		// status label
		_("Device initialized."),
		// status message
		_("Swipe your right index finger."));

	while (ui != `cancel)
	{
	    map statemap	= (map) SCR::Read (.fprint.state);
	    if (statemap != nil && statemap != $[])
	    {
		integer state	= statemap["state"]:0;
		y2milestone ("state: %1", state);
		switch (state) {
		    case 1: { // FP_ENROLL_COMPLETE
			UI::ReplaceWidget (`id (`rp),
			    // status label
			    `Label (_("Storing data...")));
			UI::ReplaceWidget (`id (`rpstatus), `VSpacing ());
			exit = true;
			break;
		    }
		    case 2: { // FP_ENROLL_FAILED
			status_message (
			    // status label
			    _("Scan failed."),
			    // status message
			    _("Swipe finger again."));
			break;
		    }
		    case 3: { // FP_ENROLL_PASS
			swipe_success	= swipe_success + 1;
//			replace_swipe_string (); FIXME

			status_message (
			    // status label
			    _("Enroll stage passed."),
			    // status message
			    _("Swipe finger again."));
			break;
		    }
		    case 101: { // FP_ENROLL_RETRY_TOO_SHORT:

			status_message (
			    // status label
			    _("Scan failed."),
			    // status message
			    _("Swipe was too short, try again."));
			break;
		    }
		    case 102: { // FP_ENROLL_RETRY_CENTER_FINGER:

			status_message (
			    // status label
			    _("Scan failed."),
			    // status message
			    _("Center your finger on the sensor and try again."));
			break;
		    }
		    case 103: { // FP_ENROLL_RETRY_REMOVE_FINGER:

			// status message
			status_message (
			    // status label
			    _("Scan failed."),
			    // status message
			    _("Remove your finger and try again."));
			break;
		    }
		    case -1: { // FP_ENROLL_FAIL
			// some fatal error
			status_message (
			    // status label
			    _("Acquiring fingerprint failed."), "");
			exit = true;
			break;
		    }
		}
		if (state < -1)
		{
		    // some fatal error
		    status_message (
			// status label
			_("Acquiring fingerprint failed."), "");
		    exit = true;
		}
	    }
	    else if (statemap == nil)
	    {
		exit_status	= get_exit_status ();
		break;
	    }
	    if (exit)
	    {
		exit_status	= get_exit_status ();
		break;//must be before check for cancel
	    }

	    ui	= UI::PollInput ();

	    if (ui == `cancel || ui == `back)
	    {
		SCR::Execute (.fprint.cancel);
		// status label (canceled after user action)
		UI::ReplaceWidget (`id (`rp), `Label (_("Canceled")));
		y2milestone ("canceled");
		break;
	    }
	    sleep (100);
	}
	y2milestone ("agent exit status: %1", exit_status);
	if (exit_status == 1)
	{
	    // status label
	    UI::ReplaceWidget (`id (`rp), `Label (_("Fingerprint acquired successfully.")));
	    UI::ReplaceWidget (`id (`rpstatus), `Label (""));
	    // new id was already saved
	    Wizard::DisableBackButton ();
	    Wizard::EnableNextButton ();
	}
	else
	{
	    // error message, part 1
	    string error	= _("Could not acquire fingerprint.");
	    string details	= "";
	    // see the error exit values in FPrintAgent.cc
	    if (exit_status == 200)
		// error message, part 2
		details	= _("Initialization failed.");
	    else if (exit_status == 201)
		// error message, part 2
		details	= _("No devices detected.");
	    else if (exit_status == 202)
		// error message, part 2
		details	= _("Device could not be opened.");
	    else if (exit_status == 253)
		// error message, part 2
		details	= _("USB error occured.");
	    else if (exit_status == 254)
		// error message, part 2
		details = _("Communication with fingerprint reader failed.");
	    if (exit_status != 256)
	    {
		status_message (error, details);
	    }
	    Wizard::EnableBackButton ();
	}
	UI::ChangeWidget (`id (`cancel), `Enabled, false);
	ret	= UI::UserInput ();
	if (ret == `next)
	{
	    // modified data to add to user
	    map<string, any> tmp_data	= $[
		"_fingerprint_dir"	: fingerprint_dir, // FIXME save correctly
		"plugin_modified"	: 1
	    ];
	    if (data["what"]:"" == "edit_user")
		Users::EditUser (tmp_data);
	    else if (data["what"]:"" == "add_user")
		Users::AddUser (tmp_data);
	}
	Wizard::CloseDialog ();
    }
    y2milestone("users plugin finished with %1", ret);
    y2milestone("----------------------------------------");
    return ret;
}
